{"version":3,"sources":["1.png","serviceWorker.js","component/card.js","component/cardList.js","component/SearchBox.js","component/warriors.js","container/App.js","component/ErrorBoundry.js","actions.js","reducers.js","index.js","constants.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","name","img","url","href","id","className","alt","src","CardList","warriors","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","Component","state","this","props","searchField","onSearchChange","filter","toLowerCase","includes","Logo","connect","dispatch","event","payload","target","value","initialState","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,+B,wJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCJSC,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,IAAIC,EAAS,EAATA,IAEpB,OACI,uBAAGC,KAAMD,GACL,yBAAKE,GAAG,SAASC,UAAU,+DAC3B,yBAAKC,IAAI,WAAWC,IAAKN,IACrB,4BAAKD,MCiBNQ,EAtBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAIf,OACI,6BACKA,EAASC,IAAI,SAACC,EAAKC,GAChB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAASG,GAAGR,GAChBJ,KAAMS,EAASG,GAAGZ,KAClBC,IAAKQ,EAASG,GAAGX,IACjBC,IAAKO,EAASG,GAAGV,UCHtBY,EAXG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,2BACIX,UAAU,sCACVY,KAAK,OACLC,YAAY,iBACZC,SAAUH,KCRTP,EAAW,CACtB,CACEL,GAAI,EACJJ,KAAM,OACNC,IAAK,0DACLC,IAAK,qCAEP,CACEE,GAAI,EACJJ,KAAM,SACNC,IAAK,0DACLC,IAAK,uCAEP,CACEE,GAAI,EACJJ,KAAM,aACNC,IAAK,0DACLC,IAAK,+CAEP,CACEE,GAAI,EACJJ,KAAM,SACNC,IAAK,2DACLC,IAAK,2CAEP,CACEE,GAAI,EACJJ,KAAM,MACNC,IAAK,2DACLC,IAAK,oCAEP,CACEE,GAAI,EACJJ,KAAM,QACNC,IAAK,2DACLC,IAAK,sCAEP,CACEE,GAAI,EACJJ,KAAM,QACNC,IAAK,0DACLC,IAAK,sCAEP,CACEE,GAAI,EACJJ,KAAM,SACNC,IAAK,2DACLC,IAAK,wC,iBCxBHkB,GCrBqBC,Y,YDsBvB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTb,SAAUA,GAHJ,E,sEAOL,IACEA,EAAYc,KAAKD,MAAjBb,SADH,EAEkCc,KAAKC,MAApCC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,eACdC,EAASlB,EAASkB,OAAO,SAAAlB,GAC3B,OAAOA,EAAST,KAAK4B,cAAcC,SAASJ,EAAYG,iBAE5D,OACI,yBAAKvB,UAAU,MACX,yBAAKA,UAAU,eACX,yBAAKE,IAAKuB,IAAMzB,UAAU,aAAaC,IAAI,MAE/C,6BAAK,kBAAC,EAAD,CAAWU,aAAcU,KAGtB,6BAAK,6BAAS,kBAAC,EAAD,CAAUjB,SAAUkB,U,GAtBxCN,cA+BHU,cA3CS,SAAAT,GACpB,MAAO,CACJG,YAAaH,EAAMG,cAIC,SAACO,GACxB,MAAO,CACHN,eAAgB,SAACO,GAAD,OAAWD,EEjBM,CACrCf,KAAM,sBACNiB,QFeuDD,EAAME,OAAOC,WAmCzDL,CAA6CX,GGpDtDiB,EAAe,CACjBZ,YAAa,ICOXa,EAAQC,YDJc,WAAwC,IAAvCjB,EAAsC,uDAA9Be,EAAcG,EAAgB,uDAAP,GACxD,OAAOA,EAAOvB,MACV,IER2B,sBFSvB,OAAOwB,OAAOC,OAAO,GAAGpB,EAAO,CAACG,YAAae,EAAON,UACxD,QACI,OAAOZ,KCCnBqB,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OACQO,SAASC,eAAe,STmH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0eca29ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.ebb74cfa.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({name,img,url}) => {\r\n    \r\n    return (\r\n        <a href={url}>\r\n            <div id=\"bcolor\" className='tc bg-light-orange dib br3 pa3 ma2 grow bw3 shadow-5 ba bw1'>\r\n            <img alt='warriors' src={img}/>\r\n                <h2>{name}</h2>\r\n            </div>\r\n        </a>        \r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({warriors}) => {\r\n    // if(true)\r\n    //     throw new Error('ERROR!!');    \r\n        \r\n    return (\r\n        <div>\r\n            {warriors.map((user,i)=>{\r\n                return(\r\n                    <Card \r\n                    key={i} \r\n                    id={warriors[i].id} \r\n                    name={warriors[i].name}\r\n                    img={warriors[i].img}  \r\n                    url={warriors[i].url}\r\n                    />\r\n                );\r\n                })\r\n            }               \r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return(\r\n        <input \r\n            className='pa3 bg-lightest-yellow ba b--yellow' \r\n            type='text' \r\n            placeholder='search warrior'\r\n            onChange={searchChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","export const warriors = [\r\n  {\r\n    id: 1,\r\n    name: 'Goku',\r\n    img: 'https://avatarfiles.alphacoders.com/782/thumb-78200.png',\r\n    url: 'https://hero.fandom.com/wiki/Goku'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Vegeta',\r\n    img: 'https://avatarfiles.alphacoders.com/733/thumb-73330.png',\r\n    url: 'https://hero.fandom.com/wiki/Vegeta'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Black Goku',\r\n    img: 'https://avatarfiles.alphacoders.com/699/thumb-69998.png',\r\n    url: 'https://villains.fandom.com/wiki/Black_Goku'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Frieza',\r\n    img: 'https://avatarfiles.alphacoders.com/160/thumb-160641.jpg',\r\n    url: 'https://villains.fandom.com/wiki/Frieza'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Hit',\r\n    img: 'https://avatarfiles.alphacoders.com/126/thumb-126352.png',\r\n    url: 'https://hero.fandom.com/wiki/Hit'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Jiren',\r\n    img: 'https://avatarfiles.alphacoders.com/122/thumb-122055.png',\r\n    url: 'https://hero.fandom.com/wiki/Jiren'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Gohan',\r\n    img: 'https://avatarfiles.alphacoders.com/623/thumb-62373.jpg',\r\n    url: 'https://hero.fandom.com/wiki/Gohan'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Trunks',\r\n    img: 'https://avatarfiles.alphacoders.com/110/thumb-110769.png',\r\n    url: 'https://hero.fandom.com/wiki/Trunks'\r\n  }]","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../component/cardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport {warriors} from '../component/warriors.js';\r\nimport Logo from '../1.png';\r\nimport Scroll from '../component/scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\n\r\nimport {setSearchField} from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n       searchField: state.searchField \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    } \r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            warriors: warriors\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {warriors} = this.state;\r\n        const {searchField, onSearchChange} = this.props;\r\n        const filter = warriors.filter(warriors => {\r\n            return warriors.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <div className='center grow'>\r\n                    <img src={Logo} className='h-100 w-50' alt=''/>\r\n                </div> \r\n                <div><SearchBox searchChange={onSearchChange}/></div> \r\n                {/* <Scroll> */}\r\n                    {/* <ErrorBoundry> */}\r\n                        <div><br></br><CardList warriors={filter}/></div>\r\n                    {/* </ErrorBoundry>                     */}\r\n                {/* </Scroll>           */}\r\n            </div>        \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOOppss that's not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import {CHANGE_SEARCH_FIELD} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})","import {CHANGE_SEARCH_FIELD} from './constants'\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider, connect} from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './container/App';\r\nimport { searchRobots } from './reducers';\r\n\r\nconst store = createStore(searchRobots);\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <App/>\r\n                </Provider>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";"],"sourceRoot":""}